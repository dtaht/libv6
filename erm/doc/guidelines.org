* erm guidelines

The "Embedded Routing Machine" - ERM - is intended to be able to run on
bare metal, a coprocessor, within a vm or container, and... also... as 
a regular Linux process. 

As such it has a few conventions that might look odd to normal C language
programmers. It is helpful to think of it as a highly specialized cpu
and assembly language for pounding through routing calculations more
than anything else.

* Oddities

** Dedicated Registers

There is at least one dedicated "flags" register per machine, located
in an onchip register. This avoids locking issues entirely within a
cpu, and, so long as you have no more than (16?) major flags within the
program, lets you run fast.

** C11isms

*** Structure return, assignment, and so forth

These are used to better emulate how a register machine would work here.

*** Strong typing

Everything is strongly typed, except what isn't. I'm working on that.

*** Threads

We use a mildly specialized c11 fake include file that allows for smaller
stacks and the simpler __thread typedef.

*** Attributes

do use "pure, const, cold, hot, noreturn", wherever possible. Note that some
notions of const and pure are violated by the vm and generational
garbage collector. 

Make sure your code operates correctly with -O3. Run valgrind. Use both
gcc and llvm.

** Tables everywhere

Don't use pointers.

** Permissions

erm uses shared memory and various permissions tricks to limit access
to itself. For maximal safety, add your administrative user to the
appropriate group, and don't access it (after starting) as root. 

** TRAPS and error handling

All library and system calls MUST be trapped, and something appropriate
MUST be done in all error cases. There are some handy macros that help
with this, and they exist because we are a virtual machine with no 
general access to normal C and linux functionality.

** Clients don't share memory space

And can be pretty much written in anything, with normal calling conventions.

That said, it's sane to try to stick to what's here.

** Tables are terminated as a stopgap from killing yourself

As this is a specialized routing engine, the end of any given table is
denominated by the special pattern 0xFFFF0000. The only place where this could
bite me is if the IETF created a multicast address type with this pattern. In
which case... I am not going to think about it.

I may have just shot myself in the foot here by abstracting out ipv4. Hmm.

** Plugins and Servers share memory space

Be *careful*. Compile with the same compile options as are in the 
build or things like the register to register calling convention may
break.

*** NEVER use a blocking operation unless you are in your own thread
And yield when it seems appropriate.

*** NEVER run a calculation with an infinite bound

ERM tries to work with tight R/T guaranties throughout. I need
to come up with a way to express this. If you need to work for longer
than X, and you need (some) of the data, allocate memory somewhere else
and do your work at leisure.

Sure - go and do a bulky operation for *a while* without calling YIELD. GC is
expensive.

Sort of in the plan is to memoize queries AND track how long they take normally
and what they conflict with, so they can be scheduled better.

but if you do something stupid like

while(1) donothing();

things will get very warm. Hmm. I wrote plugins for this just to see how warm.

*** All operations are reducing operations by default

given data X, we end up with data of some value X-Y.
If you have something that explodes in the other direction, expect problems.
I need to work out just what those are - for example a route dump from this,
reformatted to fit the kernel, explodes rather much in size - but it is a
predictable, maximum size.

*** operations are pipelined

*** Work on a local copy, accumulate changes, then commit

to borrow an example from the codebase, here's a rule that gets fired every time
it succeeds.

static int
kernel_route_notify(struct kernel_route *route, void *closure)
{
    kernel_routes_changed = 1;
    return -1;
}

it is better to bulk that up:

static inline int
kernel_route_notify(struct kernel_route *route, flags, void *closure)
{
    flags.kernel_routes_changed = 1; // OR #IMMEDATE something
}

and after you are done, I think a non-racy in memory version is:

if(flags.krc == 1 && global.flags.krc == 0  ) {
kflags_barrier_start();
flags = global.flags;
flags.krc = 1;
atomic_update(global,flags);
kflags_barrier_end();
}

which is why we just stick this in a register to start with.

You should bulk this up for anything that changes global state as the result of
an operation. (so if you changed kernel routes and addresses, accumulate then
"commit" both at the same time)

I may try adopting rcu semantics or something else in the and it may end up
the barrier has to be before and after the if.

You should *only* push things forward in a plugin. It's somebody elses job to
clear the state change back, handled by the main engine.

** Memory structures are (almost) always append only and generational

a query is "pure" in that it pulls from a generation of tables and
(in theory, unless you are asking for a "stream"), always put elsewhere.

Queries are memoized, also, if you so desire. Another way of thinking
about a "query" is that it becomes an index.

*** All structures must be aligned and padded to a natural vector boundry
- x86_64 16 bytes
- arm neon 8 bytes

*** Allocations
*** Ring Buffers
*** Message passing
*** Structure passing

** MergeSort, always

- operation: accumulate data (sorted or unsorted)
- sort the data according the core merge characteristic (or do it as part of the
  operation)
- merge the data into the main stream

Merge sort of two sorted data sets is insanely faster than walking pointers.

** Big vs Little endian

Internally IP addresses are represented in native (usually little nowadays)
endian format, and converted on the way in and out back to big endian.
This makes for faster compares, but also means that you cannot - except in
well defined cases - use common IETF defined macros like inet_ntop and so
forth. 

Use the replacement versions provided by the library. The (s)printf
hooks, are handy in particular.

On the other hand, you can assume that you never need to do a be32 
conversion as a plugin, unless you are parsing some protocol not
already handled by the engine. 

** Crash recovery

FIXME. All I can say about it.

* General Guidelines

- Use table driven design and think in terms that Codd and Date would understand

- Block on one thing only while having no pending operations

- minimize system calls

- don't use fancy functions

- hook printf rather than call printf directly

- don't use fopen and friends. Use mmap and parse stuff like it was memory in
  the first place. Then throw it away.

