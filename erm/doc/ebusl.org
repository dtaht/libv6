* Alternate C libraries

Ebusl (pronounced like you think is would be: "E buse l"), is a hacked
up version of the C library with five, maybe six, major modifications
to it (planned, thus far).

** End of errno

The biggest change to musl is that errno is killed, dead. Everything
makes an error return embeds the error return as part of the
return. So, mmap for example, returns a negative value with the 10
possible errors encoded into it. There's a side function that can turn
that new value into a errno and look it up, but that's it.

The number of error returns in POSIX is standard and stable and hasn't
changed in decades. Why look up errno?

It looks like I have to re-org wrappers around something like 80 linux
syscalls to do things this way, and it's kind of my hope to use a
modern tool (like coccinelle) to manage the patchset and for that
matter automate the process.

'cause everything that calls these (and there are only few things
planned so far - tcpdump, libpcap being the biggies) also has to have
all references to errno ripped out.

Some of this is easier - a lot of stuff just calls perror without
referring to the errno at all.

Some of this is hard: a lot of code checks for -1, where here we check
for "-". A lot of times we don't need to "check" at all - on all
modern 64 bit arches this will cause an invalid address trap if it's
an address. Since we encoded the actual error into the address, it can
jump to the right thing, also.

Other stuff may just inline an invalid instruction (which gets
trapped) - or call trap directly with an offset.

I've thought about killing NULL this way, also, but try to restrain myself.
I STILL MAY!

I totally realize that this change makes erm code incompatible with 
everything else.

** Weirder threads

- In POSIX: Threads are pre-emptive, and global, and carry around
  their own state via tls.

- In ERM: Threads are co-operative, and per cpu, and keep their own
  state in their own declared areas.

To do this, in part, involves killing the biggest user of TLS, dead -
which is errno. And god knows what else.

I HATE errno. It's good for humans, lousy for encoding actual errors.

** Better support for traps

ERM tends to trap on an error - and not actually do any inline error
checking. What you do instead is: declare a trapped function to the
compiler, and on error, you raise a trap. You overrun memory - you
trap. You fail an operation - you trap.

C++ has exceptions. These aren't it. 

GO went so far as to include a second variable entirely from all
returns. You then need to handle those inline. Yuck.

C has errnos. Show me *one* program that actually checks for and does
something correct for every possible errno a function can return, and
I'll buy you lunch. Maybe the space shuttle did, I don't know. We've
certainly crashed enough other spacecraft.

LISP has hooks you can put in front or behind *anything*. Hooks are
*really nice*. A trap in erm looks a lot like a hook - except that
they aren't inline. The linker has a map against the address of that
bit in the code that it builds a set of error handling hooks into.

"I got an instruction trap from PC counter of X - what handler do I call?"

Most ERM traps are statically declared. They MUST handle all possible
error returns from the function. You can certainly create a set of
traps and reuse those conditionally, inheret, copy/paste, whatever,
and hopefully most of the time, any given program won't need more than
a few custom ones.

There is one huge advantage in using traps. You can *easily* find and
simulate everything that can go wrong in the program and how it is
handled. You can more prove it is correct.

Another advantage (and this is not always feasible) - is that your code
doesn't get cluttered with inline error handling.

A disadvantage is that traps are slower than branches (unless I really
work hard to speed them up). And it's not always obvious what your
code will do as the trap handler is defined elsewhere from where you
are handling the error.

I'm not really sure to what extent traps will make it into ebusl. It's
a really big job to just kill errno.

** printf

I don't know what to do about printf and varargs in a message passing
system, as yet.

as written, however, there is no floating point in erm, at all, and that's
a whole lot of code that can be compiled out.

Someday FP might land back in it, though.

** Shared memory timers

The only thing that really bugs me about musl is that they didn't copy
glibc's WONDERFUL shared kernel memory timer implementation. I would
like to do that (for mainline musl as well) as it shaves MANY
nanoseconds off of getting timers - like orders of magnitude - and
doesn't trap to the kernel at all.

** Other problems

I have no idea what else will break. I'm scared to look.

* Alternate LIBCs

** glibc

waaaaaaay too big and ancient.

** uclibc

undermaintained. It WAS what I hacked up last time, but getting it to
work right with C++ was a PITA.  Last time I was also trying to get
away from needing virtual memory, also, and I'm not sure to what
extent musl works without virtual mem.

** newlib

has quite a few compelling advantages - it's small. It's used a
lot. It's the default lib on the parallella.

but it is not anywhere near as feature-full or posix compliant as musl.

** Other libcs

I haven't looked at bionic.

** Calling convention problems

It seems highly likely I'll have to muck with the default C calling
conventions for the various architectures.

A lot of state does get encoded into a few static registes
already. And structure return is difficult, yet important.

I'm not looking forward to this - because then I'll have to mod the
compiler, too.

* Plan

The plan is to work on that crazy part of the project in a separate repo,
using git submodules to bring it in.
